/********************************************************************
  sTune PID_v1 Example
  This sketch does on-the-fly tunning and PID Digital Output control
  of a thermal heater (TIP31C). Tunning parameters are quickly
  determined and applied during the temperature ramp-up to setpoint.
  Open the serial plotter to view the graphical results.
  *****************************************************************/
#include <sTune.h>
#include <PID_v1.h>

// pins
const uint8_t inputPin = 0;
const uint8_t relayPin = 3;

int pin1 = 12;
int pin2 = 13;
int encPinA = 0;
int encPinB = 1;
int _encDir = 1;
long _begin, _end;
long _encVal;

// user settings
uint32_t settleTimeSec = 10;
uint32_t testTimeSec = 500;  // runPid interval = testTimeSec / samples
const uint16_t samples = 500;
const float inputSpan = 150;
const float outputSpan = 1000;
float outputStart = 0;
float outputStep = 300;
float rpmLimit = 90;
uint8_t debounce = 1;

// variables
double input, output, setpoint = 30, kp, ki, kd; // PID_v1
float Input, Output, Setpoint = 30, Kp, Ki, Kd; // sTune

sTune tuner = sTune(&Input, &Output, tuner.ZN_PID, tuner.directIP, tuner.printOFF);
PID motorPID(&inputRpm, &outputRpm, &setpointRpm, kp, ki, kd, DIRECT);

void setup() {
    pinMode(pin1, OUTPUT);
    pinMode(pin2, OUTPUT);
    pinMode(encPinA, INPUT_PULLDOWN);
    pinMode(encPinB, INPUT_PULLDOWN);
    motorPID.SetMode(AUTOMATIC);

    attachInterrupt(encPinA, readEncA, RISING);
    attachInterrupt(encPinB, readEncB, RISING);

    Serial.begin(115200);
    while (!Serial) delay(10);
    delay(3000);
    
    tuner.Configure(inputSpan, outputSpan, outputStart, outputStep, testTimeSec, settleTimeSec, samples);
    tuner.SetEmergencyStop(rpmLimit);
}

void loop() {
  tuner.softPwm(relayPin, Input, Output, Setpoint, outputSpan, debounce);

  switch (tuner.Run()) {
    case tuner.sample: // active once per sample during test
      Input = getRpm();
      tuner.plotter(Input, Output, Setpoint, 0.1f, 3); // output scale 0.1, plot every 3rd sample
      break;

    case tuner.tunings: // active just once when sTune is done
      tuner.GetAutoTunings(&Kp, &Ki, &Kd); // sketch variables updated by sTune
      motorPID.SetOutputLimits(0, outputSpan);
      motorPID.SetSampleTime(outputSpan - 1);
      output = outputStep, kp = Kp, ki = Ki, kd = Kd;
      motorPID.SetMode(AUTOMATIC); // the PID is turned on
      motorPID.SetTunings(kp, ki, kd); // update PID with the new tunings
      break;

    case tuner.runPid: // active once per sample after tunings
      input = getRpm(); // get degC (using 3.3v AREF)
      motorPID.Compute();
      Input = input, Output = output;
      tuner.plotter(Input, Output, Setpoint, 0.1f, 3);
      break;
  }
}


void readEncA() 
{
    if(!digitalRead(encPinB)) {
        _begin = _end;
        _end = micros();
        _encVal ++;
        _encDir = 1; //forward
    }
}

void readEncB() 
{
    if (!digitalRead(encPinA)) {
        _begin = _end;
        _end = micros();
        _encVal --; 
        _encDir = -1; //backward
    }
}

double getRpm() 
{
    if (_begin && _end) {
        long lastInterval = _end - _begin;
        long nowInterval = micros()-_end; //1/370*60 
        if (lastInterval < nowInterval)
            return (double)((162162/nowInterval)*_encDir);
        else
            return (double)((162162/lastInterval)*_encDir);
    } else {
        return 0;
    }
}

void setRpm() //* rev min^-1
{
    if (outputRpm >= 0) {
        digitalWrite(pin1, LOW);
        analogWrite(pin2, (int)(outputRpm)); 
    } else {
        analogWrite(pin1, (int)(outputRpm));
        digitalWrite(pin2, LOW);
    }
}